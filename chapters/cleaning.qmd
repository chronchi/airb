# Cleaning your data

In this chapter I will show how you can clean your data before you
start any analysis. Doing this before anything else will save you a lot 
of time. It is very frequent that you need to change a variable name or
create a new column in your dataframe. By performing the cleaning and 
modifications before doing any plotting, it helps to ensure you will
be using clean data and it will make your life easier.

## Loading libraries and files

As discussed before, we start by loading the libraries we will use. Later
I will describe what the `stringr` and `janitor` library do. 

```{r, message=FALSE}
library(dplyr)
library(stringr)
library(janitor)
```

And we load up our qPCR data saved from the checkpoint. To do this we
use the function `readRDS`. For this we only specify the path to where
the checkpoint was saved. 

```{r}
qpcr <- readRDS("../checkpoints/loading/qpcr.rds")
```

## Formatting your column names

Whenever doing analysis on R it is important to have sound column names.
They make data wrangling easier. Moreover, when you repeat the 
analysis over and over again, having sane names for your columns makes 
your code cleaner. There is a very neat package in R that helps
cleaning your column names and suggesting new names: `janitor`. 
In this package there is the function `clean_names` that changes
all column names to lower case, change spaces and dots to underscores and
much more. The idea is that you have very clear names without any 
non conventional character. 

The qPCR dataframe has the following columns:

```{r}
colnames(qpcr)
```

The column `sample.ID` has both lower and upper case. This does
not help when referencing and makes reading more difficult. 

```{r}
qpcr <- qpcr %>% janitor::clean_names()

colnames(qpcr)
```

The column was changed from `sample.ID` to `sample_id`.

## Changing values in a column

> describe the use of mutate from dplyr and the functions from
stringr.

## Checkpoint

>  explain what is being saved and where
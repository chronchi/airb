# Loading your data

The first step in any data analysis is to open up your favorite 
software and load the data up. You are probably familiar with user interfaces,
where you click some buttons, you upload your excel file and *voil√°*, data
is ready to analyse. 

In this chapter I will teach you how to format your qPCR data so you
can load it easily to R. I will also show you how to load the data itself.

:::{.callout-warning}
If you are using RStudio, you can also click some buttons and load your 
data, without writing any code. I strongly recommend you to **not** do 
this. In the next sections I will show how you should be doing.
:::

## Formats, formats and more formats...

If you are here, you are probably used to excel and the format xlsx. 
R can open these files, however, it is easier to run
your analysis if you have your data in the *csv* format. For qPCR 
specially, each qPCR machine, the excel sheet will be different and not 
in a standard format. Usually it is a table with several
cells containing information regarding your run and other parameters.

Given your fresh table from the qPCR machine, we will extract some columns.
In qPCR experiments, usually there are three technical replicates for 
your samples. This is reflected in how the data is saved. 

An [example table](../data/qPCR.csv) is shown in the data folder.

## How to load your data

If you saved your table as a csv file, then we have several
options to load the file. You can use the function `read.csv` or 
`read.table` from base R to open the tables. The way to use
these functions is shown below.

```{r}
qpcr <- read.csv("../data/qPCR.csv")
qpcr <- read.table("../data/qPCR.csv", sep = ",", header = TRUE)
```

Note that for `read.table` we need to specify the separator, in this case
it is a comma (",") and we also specify `HEADER = TRUE`. This means the 
first row of your table is the header of your data frame. In general
if you have a csv file, it is easier to run `read.csv`.

## Checking the data

When loading the data, it is very important to check if it was
imported successfully or any problem happened. A package that we will
be using throughout this book is `dplyr`. Within `dplyr` we have some
functions that help us deal data frames in a very intuitive way. 
The first function we will use here to check the data is `glimpse`. 
We load the package here, but it is best practice to load all the packages
you will be using at the beginning of your analysis.

```{r, include=FALSE}
# first we start by loading the library
library(dplyr)
```

```{r}
# we now use the function glimpse on our dataframe
glimpse(qpcr)
```

The function `glimpse` displays a summary of each column of your dataframe 
and their data types. We see that `sample_id` is an integer, `group`
and `gene` are characters and finally the `ct` values are doubles, meaning
they are numeric. So far the data looks good. 

Another way to use the function `glimpse` and other functions
from the `dplyr` package is using the pipe `%>%`. The way to interpret
the pipe is the following. Given a dataframe, we pipe the dataframe
to the next function. The syntax is shown in the code block below.

```{r}
qpcr %>% glimpse
```

The output is the same as before, the difference is that we can use other
functions and chain them together. For example, if we want to see
only the first 5 rows of the table and then select the row with 
maximum ct value, we can use the function `head` followed by `slice_max`.

```{r}
qpcr %>% 
    head %>%
    slice_max(order_by = ct) # specify the column by passing the name without quotes
```

There is a flow of code when chaining functions like this. By also writing 
code like this, it is easier to modify or add new steps to the chain.

## Checkpoint

We now use `readRDS` to save our current matrix to load it up in the 
next chapter. The checkpoints are not necessary. As this is a simple analysis,
you can run everything in a single script and loaded in your memory.
The good thing about checkpoints is that you can save heavy calculations so
you do not need to perform them again. 

```{r}
saveRDS(qpcr, "../checkpoints/loading/qpcr.rds")
```

:::{.callout-tip}
`readRDS` is a function that lets you save R objects into your computer.
It is extremely handy when you want to save expensive calculations or 
continue your analysis later. Note you are only saving one object. 
:::

:::{.callout-tip}
If you are using quarto markdown or Rmarkdown, there is a chunk option
that you can use to not rerun that chunk, namely the `cache` option.
:::

For each checkpoint, we save them in a specific folder for each
chapter inside `checkpoints`, in the root folder. This ensures we know
where the data was generated by pointing to the name of the chapter. 
{
  "hash": "a8b64c73132c98aa6a6a93d37c6373d8",
  "result": {
    "markdown": "# Plotting\n\nIn this section we will show how to explore qPCR data through plotting. \nWhenever doing data analysis, it is very important to explore data\nthrough data summaries and plots. This way you learn and get a better\nfeeling for the generated data. \n\nIf you have been following the previous chapters, the data will\nbe ready to do the plotting and data exploration. Here\nwe will introduce the library `ggplot2` and we will combine\nwith the pivoting functions we previously learned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr <- readRDS(\"../checkpoints/cleaning/qpcr.rds\")\nsummarised_qpcr <- readRDS(\"../checkpoints/preparing/summarised_qpcr.rds\")\n```\n:::\n\n\n## Visualizing cycle thresholds\n\nThe first step is to understand the cycle thresholds obtained in the \ndata, even before normalizing them. This is important as we might\nfind outliers and we check how good the housekeeping genes are.\n\nMoreover, one important step of the analysis is to check the absolute \nvalues of the cycle thresholds. Sometimes the fold changes\ncan be misleading if there are high values of cycle thresholds.\n\nSince qPCR data usually is already in the long \nformat^[Check the appendix for more details.], we can\ndirectly apply the whole `ggplot2` machinery.\n\nThe idea with `ggplot2` is that one can add layers on your plot.\nYou start with an empty canvas by calling the function\n`ggplot` and you specify its aesthetics within the function \n`aes`. Here we want to plot the cycle threshold by sample id, color\nby treatment and the shape will be the genotype. \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot2::ggplot(\n    summarised_qpcr, \n    aes(x = gene, y = mean, color = genotype, shape = treatment)\n)\n```\n:::\n\n\nTo get the points for each group in a way they don't overlap with each other,\nwe use the function `geom_jitter` from `ggplot2`. This function is useful\nwhen one of the axis is categorical, which in this case is the gene.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + \n    geom_jitter() +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nWe can also modify the theme of the plot by using one of the functions\n`theme_*`. Here we use the `theme_bw`, all the basic options are\nhere: \n[https://ggplot2.tidyverse.org/reference/ggtheme.html](https://ggplot2.tidyverse.org/reference/ggtheme.html).\n\nAlready from the average cycle threshold plot for each gene we can\ndraw some conclusions. First we see that the loading worked very well\nfor all samples, as the average CT is almost the same for all samples.\nAlso from here we can see a difference in treatments among the\nWT samples from the AKT gene. Lastly, the control AKT gene from\nthe KO genotype is highly variable.\n\n## Are there any outliers? \n\nA common mistake is to use the data as it is. The exploratory analysis\nis very important as it can uncover outliers. One way to check the presence\nof weird samples is to plot the average CT values versus their standard\ndeviation. The function `geom_point` gives a scatterplot. On the other hand,\nthe function `labs` modifies the name of the axis, title and other things. \nHere we only change the x and y axis, but to change the title simply\nmodify the argument `title` within the `labs` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    summarised_qpcr, \n    aes(x = mean, y = sd, color = genotype, shape = treatment)\n) + \n    geom_point() +\n    labs(\n        x = \"Average CT values\",\n        y = \"SD of CT values\"\n    ) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](plotting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nIt seems that there is no outlier in this case. We can now proceed to the\nnext chapter, in which we normalize the data.\n",
    "supporting": [
      "plotting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
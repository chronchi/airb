{
  "hash": "9b77c06a607f43b88bf1c50d0e0dd6b6",
  "result": {
    "markdown": "# Cleaning your data\n\nIn this chapter we will go over how you can clean your data before you\nstart any analysis. Doing this before anything else will save you a lot \nof time. It is very frequent that you need to change a variable name or\ncreate a new column in your dataframe. By performing the cleaning and \nmodifications before doing any plotting, it helps to ensure you will\nbe using clean data and it will make your life easier.\n\n## Loading libraries and files\n\nAs discussed before, we start by loading the libraries we will use. In this\nsection we will go over the packages `janitor`, `stringr` and `tidyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(janitor)\nlibrary(tidyr)\n```\n:::\n\n\nAnd we load up our qPCR data saved from the checkpoint. To do this we\nuse the function `readRDS`. For this we only specify the path to where\nthe checkpoint was saved. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr <- readRDS(\"../checkpoints/loading/qpcr.rds\")\n```\n:::\n\n\n## Formatting your column names\n\nWhenever doing analysis on R it is important to have sound column names.\nThey make data wrangling easier. Moreover, when you repeat the \nanalysis over and over again, having sane names for your columns makes \nyour code cleaner. There is a very neat package in R that helps\ncleaning your column names and suggesting new names: `janitor`. \nIn this package there is the function `clean_names` that changes\nall column names to lower case, change spaces and dots to underscores and\nmuch more. The idea is that you have very clear names without any \nnon conventional character. \n\nThe qPCR dataframe has the following columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(qpcr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sample.ID\" \"group\"     \"gene\"      \"ct\"       \n```\n:::\n:::\n\n\nThe column `sample.ID` has both lower and upper case. This does\nnot help when referencing and makes reading more difficult. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr <- qpcr %>% janitor::clean_names()\n\ncolnames(qpcr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sample_id\" \"group\"     \"gene\"      \"ct\"       \n```\n:::\n:::\n\n\nThe column was changed from `sample.ID` to `sample_id`.\n\n## Changing values in a column\n\nWe saw previously that the column group contains the knockout and\ntreatment assignments. This would be better if it was in different columns.\nNotice that these two information are separated by a space in the\n`group` column. To split them, we use the function `separate` from `tidyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr <- qpcr %>% \n    # set the argument remove to FALSE so the column is not removed\n    # from the dataframe\n    separate(col = \"group\", into = c(\"genotype\", \"treatment\"), remove = FALSE)\n\nqpcr %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sample_id group genotype treatment gene    ct\n1        20  WT C       WT         C  AKT 16.49\n2        20  WT C       WT         C  AKT 16.44\n3        20  WT C       WT         C  AKT 16.65\n4        21  WT C       WT         C  AKT 16.50\n5        21  WT C       WT         C  AKT 16.74\n6        21  WT C       WT         C  AKT 16.68\n```\n:::\n:::\n\n\nNote that the samples have an ID, and they are represented by integers. \nActually it would be better if this columns is represented by factors.\nThis is actually very important when doing linear modelling. If a column\nis numeric, or integers, R will estimate the parameters as if the variable\nis continuous, whereas it should be a group for example.\n\nTo modify one column we can use the function `mutate` from `dplyr`. We\nuse the function `factor` to convert a numeric vector into \na categorical vector. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr <- qpcr %>%\n    mutate(sample_id = factor(sample_id))\n\nclass(qpcr[, \"sample_id\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n:::\n\n\n## Checkpoint\n\nWe are ready to proceed to the next steps. Before that we save once\nagain our data. You can either overwrite or create a new object. For\nthe sake of clarity, we always save a new object. Sometimes this is not \nuseful because the objects are big, so you want to actually overwrite\nthe previous rds object. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(qpcr, \"../checkpoints/cleaning/qpcr.rds\")\n```\n:::\n",
    "supporting": [
      "cleaning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}